#if COMPILED
module Day5
#endif

///Right to left / zero index
let nthOfInt (n:int) (i:int) = i / (int (System.Math.Pow(float 10, float n))) % 10
let exec readInput (src:int array) (pos:int) = 
    let r_par i = let x = src.[pos+i] in nthOfInt (i+1) src.[pos] |> function |0 -> src.[x] |1 -> x |x->failwithf "e%i" x
    let w_par i = src.[pos+i]

    match src.[pos] % 100 (*opcode*) with
    |1 -> src.[w_par 3] <- r_par 1 + r_par 2; pos+4
    |2 -> src.[w_par 3] <- r_par 1 * r_par 2; pos+4
    |3 -> src.[w_par 1] <- readInput (); pos+2
    |4 -> printfn "OUT:%i" (r_par 1); pos+2
    |5 -> if r_par 1 <> 0 then r_par 2 else pos+3
    |6 -> if r_par 1 = 0 then r_par 2 else pos+3    
    |7 -> src.[w_par 3] <- if r_par 1 < r_par 2 then 1 else 0
          pos + 4
    |8 -> src.[w_par 3] <- if r_par 1 = r_par 2 then 1 else 0
          pos + 4
    |99 -> -1
    |n -> failwithf "Unknown opcode %i at pos %i" n pos

let rec run readInput (src:int array) loc = 
    if loc = -1 then printfn "HALT"; ()
    else exec readInput src loc |> run readInput src

let input = "3,225,1,225,6,6,1100,1,238,225,104,0,1102,57,23,224,101,-1311,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,57,67,225,102,67,150,224,1001,224,-2613,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,2,179,213,224,1001,224,-469,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1001,188,27,224,101,-119,224,224,4,224,1002,223,8,223,1001,224,7,224,1,223,224,223,1,184,218,224,1001,224,-155,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1101,21,80,224,1001,224,-101,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,1101,67,39,225,1101,89,68,225,101,69,35,224,1001,224,-126,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1102,7,52,225,1102,18,90,225,1101,65,92,225,1002,153,78,224,101,-6942,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,67,83,225,1102,31,65,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,108,677,226,224,1002,223,2,223,1005,224,344,1001,223,1,223,1007,677,677,224,1002,223,2,223,1005,224,359,1001,223,1,223,1107,677,226,224,102,2,223,223,1006,224,374,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,404,1001,223,1,223,1008,226,226,224,102,2,223,223,1006,224,419,1001,223,1,223,107,677,226,224,102,2,223,223,1006,224,434,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,449,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,494,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,1008,677,226,224,102,2,223,223,1006,224,539,1001,223,1,223,1108,677,677,224,102,2,223,223,1005,224,554,101,1,223,223,108,677,677,224,102,2,223,223,1006,224,569,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,584,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,599,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,629,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,644,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,659,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,674,1001,223,1,223,4,223,99,226"
let load () = input.Split(',') |> Array.map System.Int32.Parse

let round1 = run (fun () -> 1) (load()) 0
let round2 = run (fun () -> 5) (load()) 0
